sus :: 10 + 20;
bends_but_does_not_break :: 1.0 + 4;

add :: (x: int, y: int) -> int {
    x + y
}

// We're going to need to pass pointers or have for-loops for this
// to actually be a "mac" first.
// fake_mac :: (x: int, y: int) -> int {
//     result := x * add(x, y);
//     result
// }

main :: () {
    // Tells you how it is.
    // TODO: Add printing builtin
    // print("no lie.");
    // print("da sum is: ", add(30, 12));
    // print("how suspect: ", sus);
    {} // Sometimes ya wanna nest blocks, yknow?
    zero_me_pls: int;

    // Here's good too, ja?
    {
         scoped: int = 12;
    }

    result := add(32 * 32, 64 * 64);
    30e2; // 15 * 20 + 10; "how peculiar"; 10.5;
}
